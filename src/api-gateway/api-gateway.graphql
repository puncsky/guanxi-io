# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ArticleResponse {
  abstract: String!
  contentHTML: String!
  date: String!
  filename: String!
  id: String!
  language: String!
  published: Boolean!
  references: [String!]!
  title: String!
}

type Contact {
  _id: String!
  address: String
  avatarUrl: String
  blurb: String
  bornAddress: String
  bornAt: String
  createAt: DateTime
  desire: String
  education: [Experience!]!
  emails: String
  experience: [Experience!]!
  extraversionIntroversion: String
  facebook: String
  github: String
  inboundTrust: Float
  intuitingSensing: String
  knownAt: DateTime
  knownSource: String
  linkedin: String
  name: String
  outboundTrust: Float
  phones: String
  planingPerceiving: String
  tdp: String
  thinkingFeeling: String
  title: String
  updateAt: DateTime
  workingOn: String
}

type ContactTag {
  contactId: String!
  createAt: DateTime!
  hasRate: Boolean!
  id: String!
  name: String!
  ownerId: String!
  rate: Float!
  templateId: String!
  updateAt: DateTime!
}

input CreateContactInput {
  _id: String
  address: String
  avatarUrl: String
  blurb: String
  bornAddress: String
  bornAt: String
  createAt: DateTime
  desire: String
  education: [ExperienceInput!]
  emails: String
  experience: [ExperienceInput!]
  extraversionIntroversion: String
  facebook: String
  github: String
  hmacs: [String!]
  inboundTrust: Float
  intuitingSensing: String
  knownAt: DateTime
  knownSource: String
  linkedin: String
  name: String
  outboundTrust: Float
  phones: String
  planingPerceiving: String
  tdp: String
  thinkingFeeling: String
  title: String
  updateAt: DateTime
  workingOn: String
}

input CreateTagInput {
  contactId: String!
  rate: Float!
  templateId: String!
}

input CreateTagTemplateInput {
  hasRate: Boolean!
  name: String!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input DeleteAccountInput {
  email: String!
}

input DeleteContactInput {
  _id: String!
}

input DeleteNoteInput {
  _id: String!
}

input DeleteTagInput {
  id: String!
}

input DeleteTagTemplateInput {
  id: String!
}

type Experience {
  name: String
  title: String
}

input ExperienceInput {
  name: String
  title: String
}

type Interaction {
  content: String!
  id: String!
  public: Boolean
  relatedHumans: [String!]!
  timestamp: DateTime!
}

type InteractionConnection {
  count: Float!
  interactions: [Interaction!]!
}

type InteractionCount {
  count: Float!
  date: String!
}

type Mutation {
  createContact(createContactInput: CreateContactInput!): Contact!
  createTag(createTagInput: CreateTagInput!): ContactTag!
  createTagTemplate(
    createTagTemplateInput: CreateTagTemplateInput!
  ): TagTemplate!
  deleteAccount(deleteAccountInput: DeleteAccountInput!): Boolean!
  deleteContact(deleteContactInput: DeleteContactInput!): Boolean!
  deleteNote(deleteNoteInput: DeleteNoteInput!): Boolean!
  deleteTag(deleteTagInput: DeleteTagInput!): Boolean!
  deleteTagTemplate(deleteTagTemplateInput: DeleteTagTemplateInput!): Boolean!
  deleteTask(id: String!): Boolean!
  rateTag(rateTagInput: RateTagInput!): ContactTag!
  updateContact(updateContactInput: UpdateContactInput!): Contact!
  upsertInteraction(upsertInteraction: UpsertInteraction!): Interaction!
  upsertTask(upsertTaskInput: UpsertTaskInput!): Task!
}

type PlayBook {
  content: String!
  contentHTML: String!
  date: DateTime!
  description: String!
  forwardedFor: String!
  id: String!
  isFave: Boolean!
  language: String!
  tags: [String!]!
  title: String!
  url: String!
  visitorCount: Float!
}

type Query {
  # get the article
  articles(id: String): [ArticleResponse!]
  contact(id: String, isSelf: Boolean, userId: String): Contact
  contacts(limit: Float, offset: Float): [Contact!]
  fullContact(
    email: String
    emailHash: String
    phone: String
    twitter: String
  ): String!
  getContactTags(contactId: String!): [ContactTag!]!
  getUserTagTemplates: [TagTemplate!]!
  getUserTasks(contactId: String): [Task!]!

  # is the server healthy?
  health: String!
  interactionCounts(contactId: String, isSelf: Boolean): [InteractionCount!]
  interactions(
    contactId: String
    isSelf: Boolean
    limit: Float
    offset: Float
  ): InteractionConnection!
  note(id: String!): Interaction
  playbookArticles(
    limit: Float!
    locale: String
    skip: Float!
    tag: String
  ): [PlayBook!]!
  search(hmacs: [String!], name: String!): [SearchResult!]!

  # get the user
  userProfile(userId: String!): UserProfileResponse
}

input RateTagInput {
  id: String!
  rate: Float!
}

type SearchResult {
  name: String!
  path: String!
}

type TagTemplate {
  createAt: DateTime!
  hasRate: Boolean!
  id: String!
  name: String!
  ownerId: String!
  updateAt: DateTime!
}

type Task {
  contacts: [String!]
  done: DateTime
  due: DateTime
  id: String!
  ownerId: String!
  rrule: String
  title: String!
}

input UpdateContactInput {
  _id: String!
  address: String
  avatarUrl: String
  blurb: String
  bornAddress: String
  bornAt: String
  createAt: DateTime
  desire: String
  education: [ExperienceInput!]!
  emails: String
  experience: [ExperienceInput!]!
  extraversionIntroversion: String
  facebook: String
  github: String
  hmacs: [String!]
  inboundTrust: Float
  intuitingSensing: String
  knownAt: DateTime
  knownSource: String
  linkedin: String
  name: String
  outboundTrust: Float
  phones: String
  planingPerceiving: String
  tdp: String
  thinkingFeeling: String
  title: String
  updateAt: DateTime
  workingOn: String
}

input UpsertInteraction {
  content: String!
  id: String!
  public: Boolean
  relatedHumans: [String!]!
  timestamp: DateTime!
}

input UpsertTaskInput {
  contacts: [String!]
  delayed: DateTime
  done: DateTime
  due: DateTime
  id: String
  rrule: String
  title: String!
}

type UserProfileResponse {
  email: String!
}
